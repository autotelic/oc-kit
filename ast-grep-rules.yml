rules:
  - id: security-command-injection
    message: "Potential command injection vulnerability detected"
    severity: error
    language: javascript
    rule:
      pattern: |
        spawn($CMD, [$$$ARGS])
    constraints:
      CMD:
        regex: "^(?!.*['\"`])[^'\"]*['\"`].*$"
    fix: |
      // Use proper argument escaping or validation
      spawn($CMD, [$$$ARGS])

  - id: unsafe-shell-execution
    message: "Unsafe shell execution - consider using spawn with array args"
    severity: warning
    language: javascript
    rule:
      any:
        - pattern: exec($CMD)
        - pattern: execSync($CMD)
        - pattern: spawn($CMD, { shell: true })
    constraints:
      CMD:
        not:
          regex: "^['\"`][^'\"]*['\"`]$"

  - id: missing-error-handling
    message: "Missing error handling for async operations"
    severity: warning
    language: javascript
    rule:
      pattern: |
        await $FUNC($$$ARGS)
    inside:
      kind: function_declaration
      not:
        any:
          - has:
              pattern: try
          - has:
              pattern: catch

  - id: hardcoded-secrets
    message: "Potential hardcoded secret or API key"
    severity: error
    language: javascript
    rule:
      any:
        - pattern: |
            $VAR = "$SECRET"
        - pattern: |
            const $VAR = "$SECRET"
        - pattern: |
            let $VAR = "$SECRET"
    constraints:
      SECRET:
        regex: "(?i)(api[_-]?key|secret|token|password|auth)"
      VAR:
        regex: "(?i)(api[_-]?key|secret|token|password|auth)"

  - id: package-script-validation
    message: "Package script should be validated before execution"
    severity: info
    language: javascript
    rule:
      pattern: |
        if (!scripts[$SCRIPT]) {
          $$$BODY
        }
    note: "Good practice: validating script existence before execution"

  - id: doppler-integration-check
    message: "Consider using Doppler for environment variable management"
    severity: info
    language: javascript
    rule:
      pattern: |
        process.env.$VAR
    constraints:
      VAR:
        regex: "(?i)(api[_-]?key|secret|token|password|database)"
    note: "Consider using wrapWithDoppler for secure env var management"

  - id: tool-export-pattern
    message: "Tool export following kit pattern"
    severity: info
    language: javascript
    rule:
      pattern: |
        export const $NAME = tool({
          description: $DESC,
          args: {
            $$$ARGS
          },
          async execute($PARAMS): Promise<string> {
            $$$BODY
          }
        })
    note: "Standard kit tool export pattern detected"

  - id: security-validation-usage
    message: "Good practice: using security validation"
    severity: info
    language: javascript
    rule:
      any:
        - pattern: validateScriptName($SCRIPT)
        - pattern: validateArgumentArray($ARGS)
        - pattern: checkScriptGuardrails($SCRIPT, $CONFIG)
    note: "Security validation in use - good practice"