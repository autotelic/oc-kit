rules:
  # === DOCUMENTATION PATTERNS ===
  
  - id: missing-jsdoc-functions
    message: "Function missing JSDoc documentation"
    severity: warning
    language: typescript
    rule:
      pattern: |
        function $NAME($$$ARGS) {
          $$$BODY
        }
      not:
        has:
          pattern: |
            /**
             * $$$DOC
             */
    note: "Add JSDoc documentation for better maintainability"

  - id: missing-jsdoc-export-functions
    message: "Exported function missing JSDoc documentation"
    severity: error
    language: typescript
    rule:
      pattern: |
        export function $NAME($$$ARGS) {
          $$$BODY
        }
      not:
        has:
          pattern: |
            /**
             * $$$DOC
             */
    note: "Public functions must have JSDoc documentation"

  # === ARCHITECTURE PATTERNS ===
  
  - id: tool-export-complete
    message: "Complete tool export pattern detected"
    severity: info
    language: typescript
    rule:
      pattern: |
        export const $NAME = tool({
          description: $DESC,
          args: {
            $$$ARGS
          },
          async execute(args: ToolArgs, context: OpenCodeContext): Promise<string> {
            $$$BODY
          }
        })
    note: "Standard kit tool export pattern - well structured"

  - id: working-directory-pattern
    message: "Proper working directory resolution"
    severity: info
    language: typescript
    rule:
      pattern: resolveWorkingDirectory(args, context)
    note: "Good practice: using context-aware working directory resolution"

  - id: bun-api-usage
    message: "Bun native API usage"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: Bun.spawn($$$)
        - pattern: Bun.file($$$)
        - pattern: Bun.resolveSync($$$)
        - pattern: Bun.write($$$)
    note: "Using Bun native APIs for performance"

  # === SECURITY PATTERNS ===

  - id: security-validation-required
    message: "Security validation should be applied"
    severity: warning
    language: typescript
    rule:
      pattern: |
        if (!args.script) {
          $$$
        }
    inside:
      any:
        - pattern: |
            export async function $FUNC(args: ToolArgs, context: OpenCodeContext): Promise<string> {
              $$$
            }
        - pattern: |
            async execute(args: ToolArgs, context: OpenCodeContext): Promise<string> {
              $$$
            }
    not:
      has:
        any:
          - pattern: validateScriptName($$$)
          - pattern: validateArgumentArray($$$)
          - pattern: checkScriptGuardrails($$$)
    note: "Consider adding security validation for script parameters"

  - id: security-validation-good
    message: "Security validation properly implemented"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: validateScriptName($SCRIPT)
        - pattern: validateArgumentArray($ARGS)
        - pattern: checkScriptGuardrails($SCRIPT, $CONFIG)
    note: "Good practice: security validation in use"

  - id: command-injection-risk
    message: "Potential command injection - ensure proper validation"
    severity: warning
    language: typescript
    rule:
      pattern: |
        Bun.spawn([$CMD, $$$ARGS], $$$)
    constraints:
      CMD:
        not:
          regex: "^['\"`][a-zA-Z0-9-_]+['\"`]$"
    note: "Ensure command is properly validated/sanitized"

  # === ERROR HANDLING PATTERNS ===

  - id: missing-error-handling
    message: "Missing error handling for async operations"
    severity: warning
    language: typescript
    rule:
      pattern: |
        await $FUNC($$$)
    inside:
      any:
        - kind: function_declaration
        - kind: method_definition
        - kind: arrow_function
      not:
        any:
          - has:
              pattern: try
          - has:
              pattern: catch
          - has:
              pattern: |
                } catch ($ERR) {
                  return `Error: ${($ERR as Error).message}`
                }
    note: "Consider adding try-catch for error handling"

  - id: proper-error-formatting
    message: "Proper error formatting pattern"
    severity: info
    language: typescript
    rule:
      pattern: |
        return `Error: ${($ERR as Error).message}`
    note: "Good practice: consistent error message formatting"

  # === OPENCODE TOOL PATTERNS ===

  - id: missing-tool-description
    message: "Tool export missing proper description"
    severity: warning
    language: typescript
    rule:
      pattern: |
        export const $NAME = tool({
          description: $DESC,
          $$$
        })
    constraints:
      DESC:
        regex: "^['\"`][a-zA-Z ]{0,20}['\"`]$"
    note: "Tool descriptions should be descriptive (>20 chars) for better UX"

  - id: execute-function-pattern
    message: "Standard execute function signature"
    severity: info
    language: typescript
    rule:
      pattern: |
        async execute(args: ToolArgs, context: OpenCodeContext): Promise<string> {
          $$$
        }
    note: "Standard opencode tool execute function signature"

  # === IMPORT PATTERNS ===

  - id: relative-import-from-core
    message: "Core module import detected"
    severity: info
    language: typescript
    rule:
      pattern: |
        import { $$$IMPORTS } from '../core/$MODULE.js'
    note: "Importing from core modules - good architecture"

  - id: relative-import-from-utils
    message: "Utility module import detected"
    severity: info
    language: typescript
    rule:
      pattern: |
        import { $$$IMPORTS } from '../utils/$MODULE.js'
    note: "Importing from utility modules"

  - id: bun-test-import
    message: "Bun test framework usage"
    severity: info
    language: typescript
    rule:
      pattern: |
        import { $$$IMPORTS } from 'bun:test'
    note: "Using Bun's native test framework"

  # === PERFORMANCE PATTERNS ===

  - id: streaming-execution
    message: "Streaming execution for long-running commands"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: executeWithStreaming($$$)
        - pattern: shouldUseStreaming($$$)
        - pattern: createProgressLogger($$$)
    note: "Good practice: streaming for better UX on long operations"

  - id: timeout-configuration
    message: "Timeout properly configured"
    severity: info
    language: typescript
    rule:
      pattern: |
        timeout: $TIMEOUT
    inside:
      pattern: |
        executeCommand($$$, {
          $$$
        })
    note: "Good practice: timeout configuration for command execution"

  # === DOPPLER INTEGRATION ===

  - id: doppler-integration
    message: "Doppler integration for environment variables"
    severity: info
    language: typescript
    rule:
      pattern: wrapWithDoppler($$$)
    note: "Good practice: using Doppler for secure env var management"

  - id: skip-doppler-option
    message: "Skip Doppler option available"
    severity: info
    language: typescript
    rule:
      pattern: skipDoppler
    note: "Flexibility: allowing users to skip Doppler if needed"

  # === TYPE SAFETY PATTERNS ===

  - id: type-assertion-as-error
    message: "Type assertion for error handling"
    severity: info
    language: typescript
    rule:
      pattern: ($ERR as Error)
    note: "Type safety: proper error type assertion"

  - id: toolargs-context-params
    message: "Standard tool parameter pattern"
    severity: info
    language: typescript
    rule:
      pattern: |
        (args: ToolArgs, context: OpenCodeContext)
    note: "Standard parameter pattern for kit tools"

  # === CODE SMELLS & REFACTORING ===

  - id: eslint-disable-inconsistent
    message: "Inconsistent eslint-disable usage"
    severity: warning
    language: typescript
    rule:
      pattern: // eslint-disable-next-line no-undef
    note: "Consider proper TypeScript configuration instead of disabling eslint rules"

  - id: complex-if-else-chain
    message: "Complex if-else chain - consider refactoring"
    severity: warning
    language: typescript
    rule:
      pattern: |
        if ($$$) {
          $$$THEN
        } else if ($$$) {
          $$$ELSE_IF
        } else {
          $$$ELSE
        }
    note: "Consider extracting to separate functions or using strategy pattern"

  - id: magic-string-pattern
    message: "Magic string detected - consider constants"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: $VAR.includes('build')
        - pattern: $VAR.includes('test')
        - pattern: $VAR.includes('dev')
        - pattern: $VAR.includes('start')
    note: "Consider defining string constants for better maintainability"

  # === TESTING PATTERNS ===

  - id: mock-context-usage
    message: "Mock context for testing"
    severity: info
    language: typescript
    rule:
      pattern: mockContext
    note: "Good practice: using mock context in tests"

  - id: expect-assertions
    message: "Test assertions"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: expect($VAL).toContain($$$)
        - pattern: expect($VAL).toBeDefined()
        - pattern: expect($VAL).not.toContain($$$)
    note: "Test assertions for validation"

  # === IMPORT/EXPORT CONSISTENCY ===

  - id: bun-test-import-standard
    message: "Standard Bun test framework import"
    severity: info
    language: typescript
    rule:
      pattern: import { $$$IMPORTS } from 'bun:test'
    note: "Using Bun's native test framework consistently"


  - id: relative-import-js-extension
    message: "Relative import with .js extension"
    severity: info
    language: typescript
    rule:
      pattern: import { $$$IMPORTS } from './$MODULE.js'
    note: "Good practice: explicit .js extensions for ES modules"

  # === MONOREPO PATTERNS ===

  - id: workspace-discovery-usage
    message: "Workspace discovery function usage"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: discoverWorkspaces($DIR)
        - pattern: findWorkspaceWithScript($WORKSPACES, $SCRIPT)
    note: "Good practice: using workspace discovery for monorepo support"

  - id: workspace-info-interface
    message: "WorkspaceInfo interface usage"
    severity: info
    language: typescript
    rule:
      pattern: ": WorkspaceInfo"
    note: "Type safety: using WorkspaceInfo interface for workspace data"

  - id: workspace-parameter-support
    message: "Workspace parameter in tool args"
    severity: info
    language: typescript
    rule:
      pattern: |
        workspace?: string
    inside:
      pattern: |
        args: {
          $$$
        }
    note: "Good practice: supporting workspace parameter for monorepo targeting"

  - id: workspace-relative-path-usage
    message: "Workspace relative path handling"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: targetWorkspace.relativePath
        - pattern: workspace.relativePath
        - pattern: $WORKSPACE.relativePath
    note: "Good practice: using relative paths for workspace identification"

  - id: workspace-name-fallback
    message: "Workspace name with fallback pattern"
    severity: info
    language: typescript
    rule:
      pattern: $WORKSPACE.name || $WORKSPACE.relativePath
    note: "Good practice: providing fallback when workspace name unavailable"

  - id: execution-directory-workspace
    message: "Execution directory set from workspace"
    severity: info
    language: typescript
    rule:
      pattern: |
        executionDir = $WORKSPACE.path
    note: "Good practice: setting execution directory from workspace path"

  - id: workspace-script-not-found
    message: "Workspace-aware script not found error"
    severity: info
    language: typescript
    rule:
      pattern: |
        Script "$SCRIPT" not found in any workspace
    note: "Good UX: workspace-aware error messages for script discovery"

  # === DEV SERVER PATTERNS ===

  - id: dev-server-detection
    message: "Dev server script detection"
    severity: info
    language: typescript
    rule:
      pattern: isDevServerScript($CMD, $ARGS)
    note: "Good practice: detecting dev server scripts for appropriate handling"

  - id: dev-server-recommendation
    message: "Dev server tool recommendation"
    severity: info
    language: typescript
    rule:
      pattern: |
        kit_devStart { script: "$SCRIPT"
    note: "Good UX: recommending appropriate tools for dev servers"

  - id: background-process-management
    message: "Background process management usage"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: kit_devStart
        - pattern: kit_devStatus
        - pattern: kit_devStop
        - pattern: kit_devRestart
    note: "Good practice: using background process management for dev servers"

  - id: dev-script-timeout-handling
    message: "Dev script timeout consideration"
    severity: warning
    language: typescript
    rule:
      pattern: |
        timeout: $TIME
    inside:
      pattern: |
        executeWithStreaming($CMD, $ARGS, {
          $$$
        })
    constraints:
      TIME:
        regex: "^[0-9]000$"
    note: "Consider longer timeouts for dev servers or recommend kit_devStart"

  # === RECURSIVE DISCOVERY PATTERNS ===

  - id: recursive-directory-search
    message: "Recursive directory search implementation"
    severity: info
    language: typescript
    rule:
      pattern: |
        async function searchDirectory($DIR) {
          $$$
          for (const $SUBDIR of $SUBDIRS) {
            await searchDirectory($SUBDIR)
          }
          $$$
        }
    note: "Good practice: recursive directory traversal for workspace discovery"

  - id: node-modules-exclusion
    message: "Node modules directory exclusion"
    severity: info
    language: typescript
    rule:
      any:
        - pattern: $ENTRY.name !== 'node_modules'
        - pattern: $FILENAME !== 'node_modules'
    note: "Good practice: excluding node_modules from recursive searches"

  - id: hidden-directory-exclusion
    message: "Hidden directory exclusion"
    severity: info
    language: typescript
    rule:
      pattern: $NAME.startsWith('.')
    note: "Pattern detected: hidden directory check (should be excluded)"
