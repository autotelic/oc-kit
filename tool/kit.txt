**USE THIS INSTEAD OF BASH** for package.json scripts, Docker operations, development servers, and code search. Kit provides superior automation with smart detection, Doppler integration, and structured output.

## üöÄ Core Tools

**`kit`** - Run package.json scripts with auto-detection and error handling
**`kit_list`** - List available scripts  
**`kit_docker`** - Container operations with smart defaults
**`kit_compose`** - Docker Compose with service profiles
**`kit_devStart`** - Start development servers in background
**`kit_devStatus`** - Monitor running background services
**`kit_devStop`** - Stop specific or all background services
**`kit_devRestart`** - Restart background services
**`kit_devStartAll`** - Start multiple services with profiles
**`kit_devQuery`** - Execute SQL queries on process database
**`kit_astGrepSearch`** - Search code using semantic patterns that understand syntax
**`kit_astGrepScan`** - Scan codebase using complex YAML rules for pattern matching
**`kit_astGrepDump`** - Debug AST patterns by dumping syntax trees

## üì¶ Package Scripts (Primary Use)

```typescript
// Auto-detects package manager, adds Doppler, handles complex args
kit { script: "lint" }
kit { script: "test", args: ["--watch"], cwd: "./services/ui" }
kit { script: "build" }  // Handles NODE_OPTIONS automatically
```

## üê≥ Docker Operations

```typescript
kit_dockerList {}  // See available capabilities
kit_compose { action: "up", profile: "database" }  // Start DB services
kit_docker { action: "logs", container: "api" }
```

## üîß Background Development Servers

```typescript
// Start multiple services in parallel
kit_devStart { script: "api" }     // Backend server
kit_devStart { script: "frontend" } // Frontend dev server
kit_devStart { script: "worker" }   // Background jobs

// Start multiple services at once
kit_devStartAll { profile: "backend" }  // Start predefined service group
kit_devStartAll { scripts: ["api", "worker"] }  // Start specific scripts

// Monitor and control
kit_devStatus {}                    // Show all running services
kit_devStop { script: "api" }       // Stop specific service  
kit_devRestart { script: "api" }    // Restart specific service
kit_devStop {}                      // Stop all services

// Advanced process analysis with SQL
kit_devQuery { query: "SELECT script, COUNT(*) FROM processes GROUP BY script" }
kit_devQuery { query: "SELECT * FROM processes WHERE start_time > ?", params: ["1726929000000"] }
```

## üîç Code Search & Analysis

```typescript
// Semantic code search that understands syntax structure
kit_astGrepSearch { pattern: "function $NAME($ARGS) { $BODY }" }  // Find all functions
kit_astGrepSearch { pattern: "const $VAR = ($ARGS) => $BODY", language: "typescript" }  // Arrow functions
kit_astGrepSearch { pattern: "class $NAME { $METHODS }" }  // Find classes

// Complex pattern matching with YAML rules
kit_astGrepScan { rule: "rule:\n  pattern: console.log($ARG)\n  message: Remove debug statement" }

// Debug patterns by examining AST structure
kit_astGrepDump { code: "const x = () => 42", language: "typescript", format: "ast" }
```

## ‚ö° Key Features

- **Smart Detection**: Auto-detects package managers (npm/yarn/pnpm/bun) and Docker setups
- **Doppler Integration**: Automatically wraps commands with environment variables
- **Background Services**: Run dev servers without blocking conversation
- **Multi-Service Support**: Start/stop/restart multiple services independently
- **SQLite Process Registry**: In-memory database for advanced process tracking
- **Generic SQL Querying**: Custom queries for process analysis and monitoring
- **Semantic Code Search**: AST-based patterns that understand syntax, not just text
- **Pattern Debugging**: Dump syntax trees to perfect your search patterns
- **Structured Output**: Clean exit codes, separated stdout/stderr, timeout protection
- **Zero Configuration**: Works immediately in any project

## ‚úÖ Use Kit For

- All package.json scripts (lint, test, build, dev)
- Docker operations (up/down, logs, build, exec)
- Development server management and process monitoring
- Advanced process analytics with custom SQL queries
- Semantic code search and refactoring with AST patterns
- Complex pattern matching and linting with YAML rules
- Monorepo workspace filtering
- CI/CD automation

## ‚ùå Use Bash For

- Multi-step operations with pipes
- File operations (cp, mv, mkdir)
- Complex shell scripting
- Simple text-based grep (use kit AST search instead)

**Remember**: Kit eliminates command syntax complexity while providing superior automation and error handling. Choose kit for almost all package.json, Docker, development server, and code search operations.